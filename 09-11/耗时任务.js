var count = 0;

setInterval(() => {
  count++;

  //注意：分线程中不能使用dom window document alert.....

  //分线程不能操作页面 所以把分线程中的数据发送给主线程 让主线程显示

  //分线程中的this指向当前分线程对象 用于分线程向主线程发送数据
  this.postMessage(count);
}, 1000);

// js是语言采用的是单线程模型, 所有的任务都只能在一个线程上完成, 一次只能做一件事, 前面的任务没有完成, 后面的任务只能等待, 随着电脑计算能力的增强, 尤其是多核CPU的出现, 单线程带来了很大的不便, 无法充分发挥计算机的计算能力
//     Web Worker 的作用 就是为js创造多线程环境,允许主线程创建Worker分线程,将一些耗时任务给分线程去计算,在主线程计算的同事,worker分线程也可以在后台运行,两者互不干扰,等到worker分线程完成计算任务,再把结果返回给主线程
//     好处:一些计算密集型或高延迟的任务,被worker线程负担,主线程(负责界面交互)就会很流畅,不会被阻塞或者拖慢
//     worker线程一旦新建成功,就会始终运行,不会被主线程上的活动(按钮点击,提交表单)打断,这样有利于响应线程的通信,但是这也造成worker比较耗费资源,不应该过渡使用,而且一旦使用完毕,就应该关闭

//     线程:也叫做分线程,由代码创建,独立于进程之外的另一个执行线路
//     进程:一个程序默认存在的线程,有且只有一个,程序启动时自动创建,程序结束时,自动销毁
//     主线程: 进程,是进程的另一种说法
//     分线程:简称线程

//     为什么js是单线程的?

//     1.js是浏览器脚本语言,主要用途与用户进行交互,以及操作DOM,假设js同时有两个线程,一个线程在某个dom阶段上添加内容,另一个线程删除了这个节点,这时浏览器应该以哪个线程为准?为了避免复杂性,从一诞生,js就是单线程的,将来也不会改变
